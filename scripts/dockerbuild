#!/bin/bash

VERSION=$(cat VERSION)
BUILD=$(cat BUILD)
LINES=$(wc -l src/*.go | grep total | awk '{print $1}')

TARGET_ARCH="x86_64"
BINPREF=intel

if [ "$GOARCH" == "arm64" ]; then
TARGET_ARCH=arm64
BINPREF=arm64
fi

APP_NAME=SpeedPing
BINARY=speedping-mac${BINPREF}
SRC=./src
IPERF=./iperf
RELEASE_DIR=release
BUNDLE_DIR=SpeedPing.app
APP_BUNDLE=${RELEASE_DIR}/${BUNDLE_DIR}
ICON=${SRC}/icon.icns
ZIP_NAME=SpeedPing-Mac-$BINPREF.zip

# osxcross toolchain prefix
TOOL_PREFIX=$TOOLCHAINPREFIX
OTOOL="${TOOL_PREFIX}-otool"
INSTALL_NAME_TOOL="${TOOL_PREFIX}-install_name_tool"

# App Bundle definitions
MACOS="Contents/MacOS"
PLATFORMS="Contents/PlugIns/platforms"
RESOURCES="Contents/Resources"
FRAMEWORKS="Contents/Frameworks"

echo "Building $APP_NAME version $VERSION (build: $BUILD) for Mac $BINPREF"

export PKG_CONFIG_PATH="/opt/local/libexec/qt5/lib/pkgconfig:/osxcross/macports/pkgs/opt/local/libexec/ffmpeg7/lib/pkgconfig"
export CGO_ENABLED=1
#export GOFLAGS=''

export GOMODCACHE=/go/pkg/mod
#export GOOS=darwin
#export GOARCH=amd64
export GOCACHE=/.cache/go-build

go build -ldflags "-X main.AppVersion=${VERSION} \
                -X main.build=${BUILD} \
                -X main.lines=${LINES} \
                -X main.BuildDate=$(date -Iseconds) \
                -X main.debugging=false -v -s -w" \
                -o ${BINARY} ${SRC}

RESULT=$?

if [ $RESULT -ne 0 ]; then
   echo "Build failed!"
   exit 1
fi

echo "Continuing to bundle the application..."


if ! [ -f "$BINARY" ]; then
    echo "[x] Binary does not exist!"
    exit 1
fi

if ! [ -f "$ICON" ]; then
    echo "[x] Icon file does not exist!"
    exit 1
fi

if [ -d "$APP_BUNDLE" ]; then
    echo "[*] Cleaning previous bundle..."
    rm -rf "$APP_BUNDLE"
fi

echo "[*] Creating .app structure..."
mkdir -p "$APP_BUNDLE/$MACOS"
mkdir -p "$APP_BUNDLE/$FRAMEWORKS"
mkdir -p "$APP_BUNDLE/$PLATFORMS"
mkdir -p "$APP_BUNDLE/$RESOURCES"

cp "$BINARY" "$APP_BUNDLE/$MACOS/$APP_NAME"
cp "$ICON" "$APP_BUNDLE/$RESOURCES/icon.icns"
if [ -d "$IPERF" ]; then
mkdir $APP_BUNDLE/$MACOS/iperf
cp ./iperf/iperf3-amd64-osx-13 $APP_BUNDLE/$MACOS/iperf/
chmod +x $APP_BUNDLE/$MACOS/iperf/iperf3-amd64-osx-13
fi

echo "[*] Generating Info.plist..."
cat > "$APP_BUNDLE/Contents/Info.plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
 "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>$APP_NAME</string>
  <key>CFBundleIdentifier</key>
  <string>org.e1z0.$APP_NAME</string>
  <key>CFBundleIconFile</key>
  <string>icon.icns</string>
  <key>CFBundleName</key>
  <string>$APP_NAME</string>
  <key>CFBundleShortVersionString</key>
  <string>$VERSION</string>
  <key>CFBundleVersion</key>
  <string>$BUILD</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>NSHighResolutionCapable</key>
  <true/>
  <key>CFBundleSupportedPlatforms</key>
  <array>
    <string>MacOSX</string>
  </array>
  <key>LSApplicationCategoryType</key>
  <string>public.app-category.utilities</string>
  <key>LSMinimumSystemVersion</key>
  <string>13.1</string>
<!-- Hide icon from dock <key>LSUIElement</key>
  <true/>
-->
  <key>NSHumanReadableCopyright</key>
  <string>© 2025 e1z0. All rights reserved.</string>
</dict>
</plist>
EOF

echo "[*] Copying platform plugin..."
cp /osxcross/macports/pkgs/opt/local/libexec/qt5/plugins/platforms/libqcocoa.dylib "$APP_BUNDLE/$PLATFORMS/"

# Qt conf
cat > "$APP_BUNDLE/$RESOURCES/qt.conf" <<EOF
[Paths]
Plugins = PlugIns
EOF

# Declare once for recursion tracking
declare -A visited

copy_and_patch_deps() {
    local file="$1"
    local app_bin_relpath="@executable_path/../Frameworks"
    local QT_ROOT="/osxcross/macports/pkgs"

    [[ -z "$file" || ! -e "$file" ]] && return
    [[ -n "${visited["$file"]}" ]] && return
    visited["$file"]=1

    echo "[*] Scanning: $file"

    # Extract dependencies
    local deps
    deps=$($OTOOL -L "$file" | tail -n +2 | awk '{print $1}' | grep -E '\.dylib|\.framework')

    for dep in $deps; do
        [[ "$dep" == @* || "$dep" == /System/* || "$dep" == /usr/lib/* ]] && continue

        if [[ "$dep" == *".framework/"* ]]; then
            local fwname=$(basename "$dep" | cut -d. -f1)
            local dep_fixed="${dep/\/opt\/local/$QT_ROOT/opt/local}"
            local fwroot=$(echo "$dep_fixed" | sed -E "s|(.*${fwname}\.framework).*|\1|")
            local fwdest="$APP_BUNDLE/$FRAMEWORKS/${fwname}.framework"

            if [[ ! -d "$fwdest" ]]; then
                echo "  ? Copying framework: $fwname"
                cp -R "$fwroot" "$fwdest"
                chmod -R +w "$fwdest"
            fi

            local fwlib=""
            if [[ -f "$fwdest/Versions/5/$fwname" ]]; then
                fwlib="$fwdest/Versions/5/$fwname"
            elif [[ -f "$fwdest/$fwname" ]]; then
                fwlib="$fwdest/$fwname"
            else
                fwlib=$(find "$fwdest" -type f -name "$fwname" | head -n1)
            fi

            if [[ -f "$fwlib" ]]; then
                echo "  ? Patching $file (framework: $fwname)"
                $INSTALL_NAME_TOOL -change "$dep" "$app_bin_relpath/${fwname}.framework/$fwname" "$file"
                copy_and_patch_deps "$fwlib"
            else
                echo "  ⚠️  Framework lib not found: $fwdest"
            fi
        else
            local dep_fixed="${dep/\/opt\/local/$QT_ROOT/opt/local}"
            local dep_name=$(basename "$dep")
            local dep_dest="$APP_BUNDLE/$FRAMEWORKS/$dep_name"

            if [[ ! -f "$dep_dest" ]]; then
                echo "  ? Copying dylib: $dep_name"
                cp "$dep_fixed" "$dep_dest" 2>/dev/null || {
                    echo "  ⚠️  Skipping missing: $dep_fixed"
                    continue
                }
                chmod +w "$dep_dest"
            fi

            echo "  ? Patching $file (dylib: $dep_name)"
            $INSTALL_NAME_TOOL -change "$dep" "$app_bin_relpath/$dep_name" "$file"
            copy_and_patch_deps "$dep_dest"
        fi
    done
}

# Helper: rewrite deps inside a single Mach-O file
rewrite_deps() {
  local target="$1"
  # List deps, filter only absolute /opt/local/lib paths
  otool -L "$target" | awk '/\/opt\/local\/lib\/.*\.dylib/ {print $1}' | while read -r dep; do
    local base="$(basename "$dep")"
    local new="@rpath/$base"
    echo "Fix: $target  $dep  ->  $new"
    install_name_tool -change "$dep" "$new" "$target"
  done
  # (Optional) If you want to prefer the system zlib/iconv instead of bundling, you could:
  # install_name_tool -change /opt/local/lib/libz.1.dylib /usr/lib/libz.1.dylib "$target" || true
  # install_name_tool -change /opt/local/lib/libiconv.2.dylib /usr/lib/libiconv.2.dylib "$target" || true
}

sanity_check() {
local APP="$1"
find "$APP" -type f -print0 |
while IFS= read -r -d '' f; do
  if otool -L "$f" >/dev/null 2>&1; then
    HITS=$(otool -L "$f" 2>/dev/null | awk '/^[[:space:]]+\/opt\/local\/lib\/.*\.dylib/ {print $1}')
    if [ -n "$HITS" ]; then
      echo "$f:"
      echo "$HITS" | sed 's/^/  ↳ /'
      echo
    fi
  fi
done
}

echo "[*] Patching binary and dependencies..."

#TODO install_name_tool -change /opt/local/lib/libdbus-1.3.dylib @executable_path/../Frameworks/libdbus-1.3.dylib

while IFS= read -r -d '' DY; do
  rewrite_deps "$DY"
done < <(find "$APP_BUNDLE/$FRAMEWORKS" -maxdepth 1 -type f -name '*.dylib' -print0)
# FIXME: for now

install_name_tool -add_rpath "@executable_path/../Frameworks" \
  "$APP_BUNDLE/$MACOS/$APP_NAME"

copy_and_patch_deps "$APP_BUNDLE/$MACOS/$APP_NAME"
cp /osxcross/macports/pkgs/opt/local/lib/libdbus-1.3.dylib $APP_BUNDLE/$FRAMEWORKS
mkdir -p $APP_BUNDLE/Contents/PlugIns/styles
cp /osxcross/macports/pkgs/opt/local/libexec/qt5/plugins/styles/* $APP_BUNDLE/Contents/PlugIns/styles/
./scripts/macdeployqtfix.py "$APP_BUNDLE/$MACOS/$APP_NAME" /osxcross/macports/pkgs/opt/local/libexec/qt5
install_name_tool \
  -change /opt/local/lib/libdbus-1.3.dylib \
          @executable_path/../Frameworks/libdbus-1.3.dylib \
  $APP_BUNDLE/$FRAMEWORKS/QtDBus.framework/Versions/5/QtDBus

pushd $RELEASE_DIR
if [ -f "$ZIP_NAME" ]; then
    echo "[*] Removing old zip..."
    rm -f "$ZIP_NAME"
fi
echo "[*] Compressing the archive..."
zip -ry "$ZIP_NAME" "$BUNDLE_DIR" > /dev/null
#rm -rf "$BUNDLE_DIR"
popd
echo "[*] App bundled successfully into $APP_BUNDLE"

